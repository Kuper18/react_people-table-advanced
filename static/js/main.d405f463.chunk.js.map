{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","types/SortParams.ts","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","index.tsx"],"names":["getClassLink","isActive","cn","Navbar","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuries","PeopleFilters","setSearchParams","centuriesUrl","getAll","query","get","sex","type","placeholder","onChange","event","target","map","item","includes","filter","century","Loader","PersonLink","person","slug","name","SortParams","PeopleTable","people","personSlug","useParams","sort","order","getPersonLink","parent","getParent","find","values","param","columnName","normalizeParam","replace","toUpperCase","born","died","fatherName","motherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isload","setIsLoad","shownError","setShownError","useEffect","getPeople","data","length","catch","error","finally","filteredPeople","filterParam","filteredpeople","normalyzeQuery","trim","toLowerCase","Math","ceil","String","NAME","personA","personB","localeCompare","SEX","BORN","DIED","reverse","filterPeople","createRoot","document","getElementById","render","path","element","index"],"mappings":"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","file":"static/js/main.d405f463.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\nimport { ActiveParams } from '../types/ActiveParams';\n\nconst getClassLink = ({ isActive }: ActiveParams) => {\n  return cn('navbar-item', { 'has-background-grey-lighter': isActive });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getClassLink}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={getClassLink}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","// import { PeoplePage } from './components/PeoplePage';\nimport { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuries = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuriesUrl = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(\n      searchParams, { query: event.target.value || null },\n    );\n\n    setSearchParams(search);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !searchParams.get('sex') })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={cn({ 'is-active': searchParams.get('sex') === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': searchParams.get('sex') === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleChangeQuery}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(item => (\n              <SearchLink\n                key={item}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuriesUrl.includes(item),\n                })}\n                params={{\n                  centuries: centuriesUrl.includes(item)\n                    ? centuriesUrl.filter(century => century !== item)\n                    : [...centuriesUrl, item],\n                }}\n              >\n                {item}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success',\n                { 'is-outlined': searchParams.get('centuries') })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={cn('button is-link is-outlined is-fullwidth')}\n          params={{ centuries: null, sex: null, query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      className={cn({ 'has-text-danger': person.sex === 'f' })}\n      to={`/people/${person.slug}?${searchParams.toString()}`}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","export enum SortParams {\n  NAME = 'name',\n  SEX = 'sex',\n  BORN = 'born',\n  DIED = 'died',\n}\n","import React, { } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\nimport { SortParams } from '../types/SortParams';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n}) => {\n  const [searchParams] = useSearchParams();\n  const { personSlug } = useParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const setUrlName = (columnName: string) => {\n    if (sort !== columnName) {\n      return { sort: columnName, order: null };\n    }\n\n    if (!order) {\n      return { sort: columnName, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  const getPersonLink = (\n    person: Person | undefined,\n    parent?: string | null,\n  ) => {\n    return person\n      ? (\n        <PersonLink\n          person={person}\n        />\n      )\n      : parent || '-';\n  };\n\n  const getParent = (name: string | null) => {\n    return people.find(person => person.name === name);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(SortParams).map(param => {\n            const normalizeParam = param\n              .replace(param[0], param[0].toUpperCase());\n\n            return (\n              <th key={param}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {normalizeParam}\n                  <SearchLink\n                    params={setUrlName(param)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn('fas fa-sort', {\n                          'fa-sort-up': sort === param && !order,\n                          'fa-sort-down': sort === param && order,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n            slug,\n          } = person;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={cn({ 'has-background-warning': slug === personSlug })}\n            >\n              <td>\n                {getPersonLink(person)}\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {getPersonLink(getParent(motherName), motherName)}\n              </td>\n\n              <td>\n                {getPersonLink(getParent(fatherName), fatherName)}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { SortParams } from '../types/SortParams';\n\ninterface FilterValues {\n  sex: string;\n  centuries: string[];\n  sort: string | null;\n  order: string | null;\n  query: string;\n}\n\nfunction filterPeople(people: Person[], filterParam: FilterValues): Person[] {\n  let filteredpeople = people;\n  const {\n    sex,\n    centuries,\n    sort,\n    order,\n    query,\n  } = filterParam;\n\n  if (query) {\n    const normalyzeQuery = query.trim().toLowerCase();\n\n    filteredpeople = filteredpeople.filter(person => {\n      const { name, fatherName, motherName } = person;\n\n      return name.toLowerCase().includes(normalyzeQuery)\n      || fatherName?.toLowerCase().includes(normalyzeQuery)\n      || motherName?.toLowerCase().includes(normalyzeQuery);\n    });\n  }\n\n  if (sex) {\n    switch (sex) {\n      case 'm':\n        filteredpeople = filteredpeople.filter(person => person.sex === sex);\n        break;\n\n      case 'f':\n        filteredpeople = filteredpeople.filter(person => person.sex === sex);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (centuries.length) {\n    filteredpeople = filteredpeople.filter(person => {\n      const century = Math.ceil(person.born / 100);\n\n      return centuries.includes(String(century));\n    });\n  }\n\n  if (sort) {\n    switch (sort) {\n      case SortParams.NAME:\n        filteredpeople = filteredpeople\n          .sort((personA, personB) => personA.name.localeCompare(personB.name));\n        break;\n\n      case SortParams.SEX:\n        filteredpeople = filteredpeople\n          .sort((personA, personB) => personA.sex.localeCompare(personB.sex));\n        break;\n\n      case SortParams.BORN:\n        filteredpeople = filteredpeople\n          .sort((personA, personB) => personA.born - personB.born);\n        break;\n\n      case SortParams.DIED:\n        filteredpeople = filteredpeople\n          .sort((personA, personB) => personA.died - personB.died);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (order) {\n    filteredpeople.reverse();\n  }\n\n  return filteredpeople;\n}\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isload, setIsLoad] = useState(true);\n  const [shownError, setShownError] = useState('');\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoad(true);\n    getPeople()\n      .then((data) => {\n        setPeople(data);\n        if (!data.length) {\n          setShownError('There are no people on the server');\n        }\n      })\n      .catch((error) => {\n        setShownError('Something went wrong');\n        throw error;\n      })\n      .finally(() => {\n        setIsLoad(false);\n      });\n  }, []);\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const query = searchParams.get('query') || '';\n\n  const filteredPeople = filterPeople(\n    [...people],\n    {\n      sex,\n      centuries,\n      sort,\n      order,\n      query,\n    },\n  );\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isload && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isload && <Loader /> }\n\n              {shownError.includes('went wrong') && (\n                <p data-cy=\"peopleLoadingError\">\n                  {shownError}\n                </p>\n              )}\n\n              {shownError.includes('no people on the server') && (\n                <p data-cy=\"noPeopleMessage\">\n                  {shownError}\n                </p>\n              )}\n\n              {!filteredPeople.length && !isload ? (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              ) : (\n                filteredPeople.length > 0\n                && <PeopleTable people={filteredPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":personSlug?\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}